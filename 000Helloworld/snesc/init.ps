.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __do_dma_locals 0
.define __snesc_vblank_locals 10
.define __snesc_init_locals 2

.section ".text_0x0" superfree

do_dma:
; sub sp,#__do_dma_locals
.ifgr __do_dma_locals 0
tsa
sec
sbc #__do_dma_locals
tas
.endif
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda.w #0
sep #$20
lda 3 + __do_dma_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 3 r type 0x0)
; length xxy 2 vtop->type 0x0
; nop
lda.b tcc__r0
and.w #128
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 459 ind 459
; gsym_addr t 0 a 494 ind 494
; ERROR no jump found to patch
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 611 ind 611
; cmp op 0x95 inv 1 v 243 r 611
; cmp ne
bne +
; gsym_addr t 0 a 695 ind 695
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 611
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #1024,tcc__r0
lda.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x1f0 ft 0x10 fc 0x4300
; load 9
; type 4 reg 0xf0 extra 0x67f388
; ld4 #17152,tcc__r9
lda.w #17152
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st2 tcc__r0, [tcc__r9,0]
lda.b tcc__r0
sta.b [tcc__r9]
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x1f0 ft 0x10 fc 0x2102
; load 9
; type 4 reg 0xf0 extra 0x67f388
; ld4 #8450,tcc__r9
lda.w #8450
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st2 tcc__r0, [tcc__r9,0]
lda.b tcc__r0
sta.b [tcc__r9]
; load 0
; type 4 reg 0x2f0 extra 0x0
; ld4 #snesc_oam_table1 + 0, tcc__r0 (type 0x4)
lda.w #:snesc_oam_table1
sta.b tcc__r0h
lda.w #snesc_oam_table1 + 0
sta.b tcc__r0
; store r 0x0 fr 0x1f0 ft 0x4 fc 0x4302
; load 9
; type 4 reg 0xf0 extra 0x67f388
; ld4 #17154,tcc__r9
lda.w #17154
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st4 tcc__r0, [tcc__r9,0]
lda.b tcc__r0
ldy #0
sta.b [tcc__r9],y
lda.b tcc__r0h
iny
iny
sta.b [tcc__r9],y
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #544,tcc__r0
lda.w #544
sta.b tcc__r0
; store r 0x0 fr 0x1f0 ft 0x10 fc 0x4305
; load 9
; type 4 reg 0xf0 extra 0x67f388
; ld4 #17157,tcc__r9
lda.w #17157
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st2 tcc__r0, [tcc__r9,0]
lda.b tcc__r0
sta.b [tcc__r9]
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x51f0 ft 0x11 fc 0x420b
; load 9
; type 4 reg 0x50f0 extra 0x67f388
; ld4 #16907,tcc__r9
lda.w #16907
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st1 tcc__r0, [tcc__r9,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r9]
rep #$20
__local_0:
; gsym_addr t 611 a 2413 ind 2413
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc 5
lda.w #0
sep #$20
lda 3 + __do_dma_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 3 r type 0x0)
; length xxy 2 vtop->type 0x0
; nop
lda.b tcc__r0
and.w #64
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 2774 ind 2774
; gsym_addr t 0 a 2811 ind 2811
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 2899 ind 2899
; cmp op 0x95 inv 1 v 243 r 2899
; cmp ne
bne +
; gsym_addr t 0 a 2986 ind 2986
brl __local_1
+
; gtst finished; t 2899
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #8704,tcc__r0
lda.w #8704
sta.b tcc__r0
; store r 0x0 fr 0x1f0 ft 0x10 fc 0x4300
; load 9
; type 4 reg 0xf0 extra 0x67f388
; ld4 #17152,tcc__r9
lda.w #17152
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st2 tcc__r0, [tcc__r9,0]
lda.b tcc__r0
sta.b [tcc__r9]
; load 0
; type 4 reg 0x2f0 extra 0x0
; ld4 #snesc_palette + 0, tcc__r0 (type 0x4)
lda.w #:snesc_palette
sta.b tcc__r0h
lda.w #snesc_palette + 0
sta.b tcc__r0
; store r 0x0 fr 0x1f0 ft 0x4 fc 0x4302
; load 9
; type 4 reg 0xf0 extra 0x67f388
; ld4 #17154,tcc__r9
lda.w #17154
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st4 tcc__r0, [tcc__r9,0]
lda.b tcc__r0
ldy #0
sta.b [tcc__r9],y
lda.b tcc__r0h
iny
iny
sta.b [tcc__r9],y
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #512,tcc__r0
lda.w #512
sta.b tcc__r0
; store r 0x0 fr 0x1f0 ft 0x10 fc 0x4305
; load 9
; type 4 reg 0xf0 extra 0x67f388
; ld4 #17157,tcc__r9
lda.w #17157
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st2 tcc__r0, [tcc__r9,0]
lda.b tcc__r0
sta.b [tcc__r9]
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x51f0 ft 0x11 fc 0x2121
; load 9
; type 4 reg 0x50f0 extra 0x67f388
; ld4 #8481,tcc__r9
lda.w #8481
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st1 tcc__r0, [tcc__r9,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r9]
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x51f0 ft 0x11 fc 0x420b
; load 9
; type 4 reg 0x50f0 extra 0x67f388
; ld4 #16907,tcc__r9
lda.w #16907
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st1 tcc__r0, [tcc__r9,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r9]
rep #$20
__local_1:
; gsym_addr t 2899 a 4688 ind 4688
; gsym_addr t 0 a 4723 ind 4723
; add sp, #__do_dma_locals
.ifgr __do_dma_locals 0
tsa
clc
adc #__do_dma_locals
tas
.endif
rtl
.ends

.section ".text_0x1" superfree

snesc_vblank:
; sub sp,#__snesc_vblank_locals
.ifgr __snesc_vblank_locals 0
tsa
sec
sbc #__snesc_vblank_locals
tas
.endif
; load 0
; type 17 reg 0x53f0 extra 0x67f6a8
; ld1 [snesc_do_copy + 0], tcc__r0
lda.w #0
sep #$20
lda.l snesc_do_copy + 0
rep #$20
sta.b tcc__r0
; store r 0x0 fr 0xf2 ft 0x11 fc 0xffffffff
; st1 tcc__r0, [sp,-1]
; stack adjust: fc + disp - loc 2
sep #$20
lda.b tcc__r0
sta -1 + __snesc_vblank_locals + 1,s
rep #$20
; gtst inv 1 t 0 v 242 r 5326 ind 5326
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -1 + __snesc_vblank_locals + 1,s
rep #$20
sta.b tcc__r0
; gsym_addr t 0 a 5539 ind 5539
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 5627 ind 5627
; cmp op 0x95 inv 1 v 243 r 5627
; cmp ne
bne +
; gsym_addr t 0 a 5714 ind 5714
brl __local_2
+
; gtst finished; t 5627
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [snesc_do_copy,0]
sep #$20
lda.b tcc__r0
sta.l snesc_do_copy + 0
rep #$20
; ldpush before load type 0x11 reg 0x51f2
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -1 + __snesc_vblank_locals + 1,s
rep #$20
sta.b tcc__r0
; ldpush1 (type 0x11 reg 0x0) tcc__r0
sep #$20
lda.b tcc__r0
pha
rep #$20
; call r 0x2f0
jsr.l do_dma
; add sp, #1
tsa
clc
adc #1
tas
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -1 + __snesc_vblank_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -1 r type 0x11)
; length xxy 2 vtop->type 0x0
; nop
lda.b tcc__r0
and.w #63
sta.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xffffffff
; st1 tcc__r0, [sp,-1]
; stack adjust: fc + disp - loc 2
sep #$20
lda.b tcc__r0
sta -1 + __snesc_vblank_locals + 1,s
rep #$20
; gtst inv 1 t 0 v 242 r 6852 ind 6852
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc 2
lda.w #0
sep #$20
lda -1 + __snesc_vblank_locals + 1,s
rep #$20
sta.b tcc__r0
; gsym_addr t 0 a 7065 ind 7065
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 7153 ind 7153
; cmp op 0x95 inv 1 v 243 r 7153
; cmp ne
bne +
; gsym_addr t 0 a 7240 ind 7240
brl __local_3
+
; gtst finished; t 7153
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0xf2 ft 0x0 fc 0xfffffffc
; st2 tcc__r0, [sp,-4]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -4 + __snesc_vblank_locals + 1,s
__local_15:
; gtst inv 1 t 0 v 242 r 7540 ind 7540
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc 5
lda.w #0
sep #$20
lda -1 + __snesc_vblank_locals + 1,s
rep #$20
sta.b tcc__r0
; gsym_addr t 0 a 7753 ind 7753
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 7841 ind 7841
; cmp op 0x95 inv 1 v 243 r 7841
; cmp ne
bne +
; gsym_addr t 0 a 7928 ind 7928
brl __local_4
+
; gtst finished; t 7841
; load 0
; type 0 reg 0x1f2 extra 0x67f0e0
; ld2 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc 2
lda -4 + __snesc_vblank_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #3
lda.b tcc__r0
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld512 #snesc_dma_transfers + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:snesc_dma_transfers
sta.b tcc__r1h
lda.w #snesc_dma_transfers + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 512 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #3
sta.b tcc__r1
; load 0
; type 17 reg 0x5101 extra 0x0
; ld1 [tcc__r1,0],tcc__r0
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r0
; gjmp_addr 0 at 8910
jmp.w __local_5
; gsym_addr t 8948 a 0 ind 8948
; gjmp_addr 0 at 8980
jmp.w __local_6
; gsym_addr t 9018 a 0 ind 9018
__local_5:
; gsym_addr t 8948 a 9050 ind 9050
; gen_opi len 2 op ”
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 9192 ind 9192
; gsym_addr t 0 a 9229 ind 9229
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 9317 ind 9317
; cmp op 0x95 inv 1 v 243 r 9317
; cmp ne
bne +
; gsym_addr t 0 a 9404 ind 9404
brl __local_7
+
; gtst finished; t 9317
__local_6:
; gsym_addr t 9018 a 9476 ind 9476
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #6145,tcc__r0
lda.w #6145
sta.b tcc__r0
; store r 0x0 fr 0x1f0 ft 0x10 fc 0x4300
; load 9
; type 4 reg 0xf0 extra 0x67f0e8
; ld4 #17152,tcc__r9
lda.w #17152
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st2 tcc__r0, [tcc__r9,0]
lda.b tcc__r0
sta.b [tcc__r9]
; load 0
; type 0 reg 0x1f2 extra 0x67ee50
; ld2 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc 2
lda -4 + __snesc_vblank_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #3
lda.b tcc__r0
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld512 #snesc_dma_transfers + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:snesc_dma_transfers
sta.b tcc__r1h
lda.w #snesc_dma_transfers + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x10)
; length xxy 512 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x10)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #4
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; store r 0x0 fr 0x1f0 ft 0x10 fc 0x2116
; load 9
; type 4 reg 0xf0 extra 0x67f148
; ld4 #8470,tcc__r9
lda.w #8470
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st2 tcc__r0, [tcc__r9,0]
lda.b tcc__r0
sta.b [tcc__r9]
; gjmp_addr 0 at 10901
jmp.w __local_8
; gsym_addr t 10940 a 0 ind 10940
; gjmp_addr 0 at 10974
jmp.w __local_9
; gsym_addr t 11013 a 0 ind 11013
__local_7:
; gsym_addr t 9317 a 11047 ind 11047
; gen_opi len 2 op ”
; cmpr(n)eq tcc__r0, #1
ldx #1
lda.b tcc__r0
sec
sbc #1
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 11191 ind 11191
; gsym_addr t 0 a 11230 ind 11230
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 11320 ind 11320
; cmp op 0x95 inv 1 v 243 r 11320
; cmp ne
bne +
; gsym_addr t 0 a 11410 ind 11410
brl __local_10
+
; gtst finished; t 11320
__local_9:
; gsym_addr t 11013 a 11486 ind 11486
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #1024,tcc__r0
lda.w #1024
sta.b tcc__r0
; store r 0x0 fr 0x1f0 ft 0x10 fc 0x4300
; load 9
; type 4 reg 0xf0 extra 0x67f0e8
; ld4 #17152,tcc__r9
lda.w #17152
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st2 tcc__r0, [tcc__r9,0]
lda.b tcc__r0
sta.b [tcc__r9]
; load 0
; type 0 reg 0x1f2 extra 0x67ee50
; ld2 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc 2
lda -4 + __snesc_vblank_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #3
lda.b tcc__r0
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld512 #snesc_dma_transfers + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:snesc_dma_transfers
sta.b tcc__r1h
lda.w #snesc_dma_transfers + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x10)
; length xxy 512 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x10)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #4
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0xc9008c
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; store r 0x0 fr 0x1f0 ft 0x10 fc 0x2102
; load 9
; type 4 reg 0xf0 extra 0x67f148
; ld4 #8450,tcc__r9
lda.w #8450
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st2 tcc__r0, [tcc__r9,0]
lda.b tcc__r0
sta.b [tcc__r9]
; gjmp_addr 10940 at 12919
jmp.w __local_11
; gsym_addr t 12963 a 10940 ind 12963
; gjmp_addr 0 at 13001
jmp.w __local_12
; gsym_addr t 13041 a 0 ind 13041
__local_10:
; gsym_addr t 11320 a 13075 ind 13075
; gen_opi len 2 op ”
; cmpr(n)eq tcc__r0, #2
ldx #1
lda.b tcc__r0
sec
sbc #2
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 13220 ind 13220
; gsym_addr t 0 a 13259 ind 13259
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 13349 ind 13349
; cmp op 0x95 inv 1 v 243 r 13349
; cmp ne
bne +
; gsym_addr t 0 a 13439 ind 13439
brl __local_13
+
; gtst finished; t 13349
__local_12:
; gsym_addr t 13041 a 13515 ind 13515
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #8704,tcc__r0
lda.w #8704
sta.b tcc__r0
; store r 0x0 fr 0x1f0 ft 0x10 fc 0x4300
; load 9
; type 4 reg 0xf0 extra 0x67f0e8
; ld4 #17152,tcc__r9
lda.w #17152
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st2 tcc__r0, [tcc__r9,0]
lda.b tcc__r0
sta.b [tcc__r9]
; load 0
; type 0 reg 0x1f2 extra 0x67ee50
; ld2 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc 2
lda -4 + __snesc_vblank_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #3
lda.b tcc__r0
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld512 #snesc_dma_transfers + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:snesc_dma_transfers
sta.b tcc__r1h
lda.w #snesc_dma_transfers + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x11)
; length xxy 512 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x11)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #4
sta.b tcc__r1
; load 0
; type 17 reg 0x101 extra 0x0
; ld1 [tcc__r1,0],tcc__r0
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r0
; store r 0x0 fr 0x51f0 ft 0x11 fc 0x2121
; load 9
; type 4 reg 0x50f0 extra 0x67f148
; ld4 #8481,tcc__r9
lda.w #8481
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st1 tcc__r0, [tcc__r9,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r9]
rep #$20
; gjmp_addr 12963 at 14991
jmp.w __local_14
; gsym_addr t 15035 a 12963 ind 15035
__local_13:
; gsym_addr t 13349 a 15073 ind 15073
__local_8:
__local_11:
__local_14:
; gsym_addr t 15035 a 15111 ind 15111
; load 0
; type 0 reg 0x1f2 extra 0x67ef10
; ld2 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc 2
lda -4 + __snesc_vblank_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #3
lda.b tcc__r0
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld512 #snesc_dma_transfers + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:snesc_dma_transfers
sta.b tcc__r1h
lda.w #snesc_dma_transfers + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x10)
; length xxy 512 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; store r 0x0 fr 0x1f0 ft 0x10 fc 0x4302
; load 9
; type 4 reg 0xf0 extra 0x67f208
; ld4 #17154,tcc__r9
lda.w #17154
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st2 tcc__r0, [tcc__r9,0]
lda.b tcc__r0
sta.b [tcc__r9]
; load 0
; type 0 reg 0x1f2 extra 0x67ef10
; ld2 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc 2
lda -4 + __snesc_vblank_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #3
lda.b tcc__r0
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld512 #snesc_dma_transfers + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:snesc_dma_transfers
sta.b tcc__r1h
lda.w #snesc_dma_transfers + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x10)
; length xxy 512 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x10)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #6
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; store r 0x0 fr 0x1f0 ft 0x10 fc 0x4305
; load 9
; type 4 reg 0xf0 extra 0x67f208
; ld4 #17157,tcc__r9
lda.w #17157
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st2 tcc__r0, [tcc__r9,0]
lda.b tcc__r0
sta.b [tcc__r9]
; load 0
; type 0 reg 0x1f2 extra 0x67ef10
; ld2 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc 2
lda -4 + __snesc_vblank_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #3
lda.b tcc__r0
asl a
asl a
asl a
sta.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld512 #snesc_dma_transfers + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:snesc_dma_transfers
sta.b tcc__r1h
lda.w #snesc_dma_transfers + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x11)
; length xxy 512 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x11)
; length xxy 4 vtop->type 0x4
inc.b tcc__r1
inc.b tcc__r1
; load 0
; type 17 reg 0x5101 extra 0x0
; ld1 [tcc__r1,0],tcc__r0
lda.w #0
sep #$20
lda.b [tcc__r1]
rep #$20
sta.b tcc__r0
; store r 0x0 fr 0x51f0 ft 0x11 fc 0x4304
; load 9
; type 4 reg 0x50f0 extra 0x67f208
; ld4 #17156,tcc__r9
lda.w #17156
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st1 tcc__r0, [tcc__r9,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r9]
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x51f0 ft 0x11 fc 0x420b
; load 9
; type 4 reg 0x50f0 extra 0x67f208
; ld4 #16907,tcc__r9
lda.w #16907
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st1 tcc__r0, [tcc__r9,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r9]
rep #$20
; load 0
; type 0 reg 0x1f2 extra 0x0
; ld2 [sp,-4],tcc__r0
; stack adjust: fc + disp - loc 2
lda -4 + __snesc_vblank_locals + 1,s
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x1
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -4 r type 0x0)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x0 fc 0xfffffffc
; st2 tcc__r0, [sp,-4]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -4 + __snesc_vblank_locals + 1,s
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc 5
lda.w #0
sep #$20
lda -1 + __snesc_vblank_locals + 1,s
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x1
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -1 r type 0x11)
; length xxy 2 vtop->type 0x0
dec.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xffffffff
; st1 tcc__r0, [sp,-1]
; stack adjust: fc + disp - loc 5
sep #$20
lda.b tcc__r0
sta -1 + __snesc_vblank_locals + 1,s
rep #$20
; gjmp_addr 7540 at 19768
jmp.w __local_15
; gsym_addr t 19811 a 7540 ind 19811
__local_4:
; gsym_addr t 7841 a 19848 ind 19848
; gsym_addr t 0 a 7540 ind 19885
__local_3:
; gsym_addr t 7153 a 19918 ind 19918
__local_2:
; gsym_addr t 5627 a 19955 ind 19955
__local_17:
; load 0
; type 17 reg 0x51f0 extra 0x0
; deref constant ptr ld [16914],tcc__r0
lda.w #0
sep #$20
lda.l 16914
rep #$20
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 16914 r type 0x0)
; length xxy 2 vtop->type 0x0
; nop
lda.b tcc__r0
and.w #1
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 20290 ind 20290
; gsym_addr t 0 a 20329 ind 20329
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 20419 ind 20419
; cmp op 0x95 inv 1 v 243 r 20419
; cmp ne
bne +
; gsym_addr t 0 a 20509 ind 20509
brl __local_16
+
; gtst finished; t 20419
; gjmp_addr 19992 at 20585
jmp.w __local_17
; gsym_addr t 20629 a 19992 ind 20629
__local_16:
; gsym_addr t 20419 a 20667 ind 20667
; gsym_addr t 0 a 19992 ind 20705
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffa
; st2 tcc__r0, [sp,-6]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -6 + __snesc_vblank_locals + 1,s
__local_20:
; load 0
; type 16 reg 0x1f2 extra 0x67f4c8
; ld2 [sp,-6],tcc__r0
; stack adjust: fc + disp - loc 2
lda -6 + __snesc_vblank_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op ’
; ucmpcd tcc__r0, #4
ldx #1
lda.b tcc__r0
sec
sbc.w #4
tay
bcc ++
+ dex
++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 21231 ind 21231
; gsym_addr t 0 a 21270 ind 21270
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 21360 ind 21360
; cmp op 0x95 inv 1 v 243 r 21360
; cmp ne
bne +
; gsym_addr t 0 a 21450 ind 21450
brl __local_18
+
; gtst finished; t 21360
; gjmp_addr 0 at 21526
jmp.w __local_19
; gsym_addr t 21566 a 0 ind 21566
__local_21:
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-6],tcc__r0
; stack adjust: fc + disp - loc 2
lda -6 + __snesc_vblank_locals + 1,s
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x1
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -6 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffffa
; st2 tcc__r0, [sp,-6]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -6 + __snesc_vblank_locals + 1,s
; gjmp_addr 20970 at 22152
jmp.w __local_20
; gsym_addr t 22196 a 20970 ind 22196
__local_19:
; gsym_addr t 21566 a 22234 ind 22234
; load 0
; type 16 reg 0x1f2 extra 0x67f260
; ld2 [sp,-6],tcc__r0
; stack adjust: fc + disp - loc 2
lda -6 + __snesc_vblank_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld8 #snesc_controllers + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:snesc_controllers
sta.b tcc__r1h
lda.w #snesc_controllers + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 8 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x1f2 extra 0x67f090
; ld2 [sp,-6],tcc__r0
; stack adjust: fc + disp - loc 2
lda -6 + __snesc_vblank_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; gen_opi len 4 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -6 r type 0x10)
; length xxy 2 vtop->type 0x10
; assuming pointer arith
stz.b tcc__r0h
clc
lda.b tcc__r0
adc.w #16920
sta.b tcc__r0
; load 2
; type 16 reg 0x101 extra 0x67f388
; ld2 [tcc__r1,0],tcc__r2
lda.b [tcc__r1]
sta.b tcc__r2
; load 3
; type 16 reg 0x100 extra 0x67f388
; ld2 [tcc__r0,0],tcc__r3
lda.b [tcc__r0]
sta.b tcc__r3
; gen_opi len 2 op |
; ora tcc__r3 (0x3), tcc__r2 (0x2) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
; nop
lda.b tcc__r2
ora.b tcc__r3
sta.b tcc__r2
; store r 0x2 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r2, [tcc__r1,0]
lda.b tcc__r2
sta.b [tcc__r1]
; gjmp_addr 21600 at 23731
jmp.w __local_21
; gsym_addr t 23775 a 21600 ind 23775
__local_18:
; gsym_addr t 21360 a 23813 ind 23813
; gsym_addr t 0 a 21600 ind 23851
; load 0
; type 17 reg 0x53f0 extra 0x67f6a8
; ld1 [snesc_timer_enabled + 0], tcc__r0
lda.w #0
sep #$20
lda.l snesc_timer_enabled + 0
rep #$20
sta.b tcc__r0
; store r 0x0 fr 0xf2 ft 0x11 fc 0xfffffff9
; st1 tcc__r0, [sp,-7]
; stack adjust: fc + disp - loc 2
sep #$20
lda.b tcc__r0
sta -7 + __snesc_vblank_locals + 1,s
rep #$20
; load 0
; type 16 reg 0xf0 extra 0x67f6a8
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0xf2 ft 0x10 fc 0xfffffff6
; st2 tcc__r0, [sp,-10]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -10 + __snesc_vblank_locals + 1,s
__local_23:
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-7],tcc__r0
; stack adjust: fc + disp - loc 5
lda.w #0
sep #$20
lda -7 + __snesc_vblank_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -7 r type 0x0)
; length xxy 2 vtop->type 0x0
; nop
lda.b tcc__r0
and.w #1
sta.b tcc__r0
; gtst inv 1 t 0 v 0 r 24785 ind 24785
; gsym_addr t 0 a 24824 ind 24824
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 24914 ind 24914
; cmp op 0x95 inv 1 v 243 r 24914
; cmp ne
bne +
; gsym_addr t 0 a 25004 ind 25004
brl __local_22
+
; gtst finished; t 24914
; load 0
; type 16 reg 0x1f2 extra 0x67f260
; ld2 [sp,-10],tcc__r0
; stack adjust: fc + disp - loc 2
lda -10 + __snesc_vblank_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld32 #snesc_timers + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:snesc_timers
sta.b tcc__r1h
lda.w #snesc_timers + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 32 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; load 2
; type 0 reg 0x0 extra 0x1
; mov tcc__r0, tcc__r2
lda.b tcc__r0
sta.b tcc__r2
lda.b tcc__r0h
sta.b tcc__r2h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,-10],tcc__r0
; stack adjust: fc + disp - loc 2
lda -10 + __snesc_vblank_locals + 1,s
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x1
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c -10 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x10 fc 0xfffffff6
; st2 tcc__r0, [sp,-10]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -10 + __snesc_vblank_locals + 1,s
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-7],tcc__r0
; stack adjust: fc + disp - loc 5
lda.w #0
sep #$20
lda -7 + __snesc_vblank_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; sar tcc__r0, #1
cmp #$8000
ror.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xfffffff9
; st1 tcc__r0, [sp,-7]
; stack adjust: fc + disp - loc 5
sep #$20
lda.b tcc__r0
sta -7 + __snesc_vblank_locals + 1,s
rep #$20
; gjmp_addr 24449 at 27065
jmp.w __local_23
; gsym_addr t 27109 a 24449 ind 27109
__local_22:
; gsym_addr t 24914 a 27147 ind 27147
; gsym_addr t 0 a 24449 ind 27185
; gsym_addr t 0 a 27219 ind 27219
; add sp, #__snesc_vblank_locals
.ifgr __snesc_vblank_locals 0
tsa
clc
adc #__snesc_vblank_locals
tas
.endif
rtl
.ends

.section ".text_0x2" superfree

snesc_init:
; sub sp,#__snesc_init_locals
.ifgr __snesc_init_locals 0
tsa
sec
sbc #__snesc_init_locals
tas
.endif
; load 0
; type 132 reg 0x2f0 extra 0x0
; ld4 #snesc_vblank + 0, tcc__r0 (type 0x84)
lda.w #:snesc_vblank
sta.b tcc__r0h
lda.w #snesc_vblank + 0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x84 fc 0x0
; st4 tcc__r0, [__nmi_handler,0]
lda.b tcc__r0
sta.l __nmi_handler + 0
lda.b tcc__r0h
sta.l __nmi_handler + 0 + 2
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #129,tcc__r0
lda.w #129
sta.b tcc__r0
; store r 0x0 fr 0x51f0 ft 0x11 fc 0x4200
; load 9
; type 4 reg 0x50f0 extra 0x67f448
; ld4 #16896,tcc__r9
lda.w #16896
sta.b tcc__r9
lda.w #0
sta.b tcc__r9h
; st1 tcc__r0, [tcc__r9,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r9]
rep #$20
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [snesc_controllers,0]
lda.b tcc__r0
sta.l snesc_controllers + 0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [snesc_do_copy,0]
sep #$20
lda.b tcc__r0
sta.l snesc_do_copy + 0
rep #$20
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
; nop
lda.b tcc__r0
and.w #255
sta.b tcc__r0
; gen_opi len 2 op &
; and tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 0 r type 0x11)
; length xxy 2 vtop->type 0x0
; nop
lda.b tcc__r0
and.w #255
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [snesc_timer_enabled,0]
sep #$20
lda.b tcc__r0
sta.l snesc_timer_enabled + 0
rep #$20
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x0 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -2 + __snesc_init_locals + 1,s
__local_26:
; load 0
; type 0 reg 0x1f2 extra 0x67f4c8
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 2
lda -2 + __snesc_init_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op œ
; cmpcd tcc__r0, #128
ldx #1
lda.b tcc__r0
sec
sbc.w #128
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 29446 ind 29446
; gsym_addr t 0 a 29485 ind 29485
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 29575 ind 29575
; cmp op 0x95 inv 1 v 243 r 29575
; cmp ne
bne +
; gsym_addr t 0 a 29665 ind 29665
brl __local_24
+
; gtst finished; t 29575
; gjmp_addr 0 at 29741
jmp.w __local_25
; gsym_addr t 29781 a 0 ind 29781
__local_27:
; load 0
; type 0 reg 0x1f2 extra 0x0
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 2
lda -2 + __snesc_init_locals + 1,s
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x1
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -2 r type 0x0)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x0 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -2 + __snesc_init_locals + 1,s
; gjmp_addr 29163 at 30358
jmp.w __local_26
; gsym_addr t 30402 a 29163 ind 30402
__local_25:
; gsym_addr t 29781 a 30440 ind 30440
; load 0
; type 0 reg 0x1f2 extra 0x67f260
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 2
lda -2 + __snesc_init_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld512 #snesc_oam_table1 + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:snesc_oam_table1
sta.b tcc__r1h
lda.w #snesc_oam_table1 + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 512 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x5101 ft 0x11 fc 0x0
; st1 tcc__r0, [tcc__r1,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r1]
rep #$20
; load 0
; type 0 reg 0x1f2 extra 0x67f260
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 2
lda -2 + __snesc_init_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld512 #snesc_oam_table1 + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:snesc_oam_table1
sta.b tcc__r1h
lda.w #snesc_oam_table1 + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 512 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r1
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #232,tcc__r0
lda.w #232
sta.b tcc__r0
; store r 0x0 fr 0x5101 ft 0x11 fc 0x0
; st1 tcc__r0, [tcc__r1,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r1]
rep #$20
; load 0
; type 0 reg 0x1f2 extra 0x67f260
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 2
lda -2 + __snesc_init_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld512 #snesc_oam_table1 + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:snesc_oam_table1
sta.b tcc__r1h
lda.w #snesc_oam_table1 + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 512 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
inc.b tcc__r1
inc.b tcc__r1
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x5101 ft 0x11 fc 0x0
; st1 tcc__r0, [tcc__r1,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r1]
rep #$20
; load 0
; type 0 reg 0x1f2 extra 0x67f260
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 2
lda -2 + __snesc_init_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld512 #snesc_oam_table1 + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:snesc_oam_table1
sta.b tcc__r1h
lda.w #snesc_oam_table1 + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 512 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x4 c 0 r type 0x0)
; length xxy 4 vtop->type 0x4
clc
lda.b tcc__r1
adc.w #3
sta.b tcc__r1
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x5101 ft 0x11 fc 0x0
; st1 tcc__r0, [tcc__r1,0]
sep #$20
lda.b tcc__r0
sta.b [tcc__r1]
rep #$20
; gjmp_addr 29815 at 34083
jmp.w __local_27
; gsym_addr t 34127 a 29815 ind 34127
__local_24:
; gsym_addr t 29575 a 34165 ind 34165
; gsym_addr t 0 a 29815 ind 34203
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x0 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -2 + __snesc_init_locals + 1,s
__local_30:
; load 0
; type 0 reg 0x1f2 extra 0x67f4c8
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 2
lda -2 + __snesc_init_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op œ
; cmpcd tcc__r0, #32
ldx #1
lda.b tcc__r0
sec
sbc.w #32
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 34745 ind 34745
; gsym_addr t 0 a 34784 ind 34784
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 34874 ind 34874
; cmp op 0x95 inv 1 v 243 r 34874
; cmp ne
bne +
; gsym_addr t 0 a 34964 ind 34964
brl __local_28
+
; gtst finished; t 34874
; gjmp_addr 0 at 35040
jmp.w __local_29
; gsym_addr t 35080 a 0 ind 35080
__local_31:
; load 0
; type 0 reg 0x1f2 extra 0x67f448
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 2
lda -2 + __snesc_init_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -2 r type 0x0)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
inc.b tcc__r0
; store r 0x0 fr 0x1f2 ft 0x0 fc 0xfffffffe
; st2 tcc__r0, [sp,-2]
; stack adjust: fc + disp - loc 2
lda.b tcc__r0
sta -2 + __snesc_init_locals + 1,s
; gjmp_addr 34464 at 35559
jmp.w __local_30
; gsym_addr t 35603 a 34464 ind 35603
__local_29:
; gsym_addr t 35080 a 35641 ind 35641
; load 0
; type 0 reg 0x1f2 extra 0x67f260
; ld2 [sp,-2],tcc__r0
; stack adjust: fc + disp - loc 2
lda -2 + __snesc_init_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld64 #snesc_oam_table2 + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:snesc_oam_table2
sta.b tcc__r1h
lda.w #snesc_oam_table2 + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x0)
; length xxy 64 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x101 ft 0x10 fc 0x0
; st2 tcc__r0, [tcc__r1,0]
lda.b tcc__r0
sta.b [tcc__r1]
; gjmp_addr 35114 at 36435
jmp.w __local_31
; gsym_addr t 36479 a 35114 ind 36479
__local_28:
; gsym_addr t 34874 a 36517 ind 36517
; gsym_addr t 0 a 35114 ind 36555
; gsym_addr t 0 a 36589 ind 36589
; add sp, #__snesc_init_locals
.ifgr __snesc_init_locals 0
tsa
clc
adc #__snesc_init_locals
tas
.endif
rtl
.ends
.ramsection "ram.data" bank $7f slot 3
__local_dummy.data dsb 1

.ends

.section ".data" superfree

__local_dummy.data: .db 0
.ends

.section ".rodata" superfree

__local_dummy.rodata: .db 0
.ends

.ramsection ".bss" bank $7e slot 2
snesc_do_copy dsb 1
snesc_timer_enabled dsb 1
snesc_timers dsb 32
snesc_oam_table1 dsb 512
snesc_oam_table2 dsb 32
snesc_palette dsb 512
snesc_controllers dsb 8
snesc_dma_transfers dsb 512
.ends
